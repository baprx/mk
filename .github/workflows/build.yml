name: Build and Test

on:
  pull_request:
    branches:
      - main
    paths:
      - Cargo.lock
      - Cargo.toml
      - mise.toml
      - src/**
      - tests/**

permissions:
  pull-requests: write

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install required tools
        uses: jdx/mise-action@e3d7b8d67a7958d1207f6ed871e83b1ea780e7b0 # v3.3.1

      - name: Cache cargo registry
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests with nextest
        id: nextest
        env:
          NEXTEST_EXPERIMENTAL_LIBTEST_JSON: "1"
        run: |
          cargo nextest run --profile ci --message-format libtest-json-plus | tee nextest-results.json
          # Parse libtest-json-plus output for test results using jq
          # Sum up results from all suite completion events
          if [ -f nextest-results.json ]; then
            PASSED=$(jq -s '[.[] | select(.type=="suite" and .event=="ok") | .passed] | add // 0' nextest-results.json)
            FAILED=$(jq -s '[.[] | select(.type=="suite" and .event=="ok") | .failed] | add // 0' nextest-results.json)
            SKIPPED=$(jq -s '[.[] | select(.type=="suite" and .event=="ok") | .ignored] | add // 0' nextest-results.json)
            TOTAL=$((PASSED + FAILED + SKIPPED))
          else
            TOTAL=0
            PASSED=0
            FAILED=0
            SKIPPED=0
          fi
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT

      - name: Comment PR with results
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const total = '${{ steps.nextest.outputs.total }}';
            const passed = '${{ steps.nextest.outputs.passed }}';
            const failed = '${{ steps.nextest.outputs.failed }}';
            const skipped = '${{ steps.nextest.outputs.skipped }}';

            const body = `## 🧪 Test Results

            | Metric | Value |
            |--------|-------|
            | ✅ Passed | ${passed}/${total} |
            | ❌ Failed | ${failed} |
            | ⏭️ Skipped | ${skipped} |

            ---
            *Generated by cargo-nextest*`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🧪 Test Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install required tools
        uses: jdx/mise-action@e3d7b8d67a7958d1207f6ed871e83b1ea780e7b0 # v3.3.1

      - name: Cache cargo registry
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate coverage report
        id: coverage
        run: |
          cargo llvm-cov --all-features --workspace --json --summary-only --output-path coverage.json
          echo "functions=$(jq -r '(.data[].totals.functions.percent*100|round/100|tostring) + "% (" + (.data[].totals.functions.covered|tostring) + "/" + (.data[].totals.functions.count|tostring) + ")"' coverage.json)" >> $GITHUB_OUTPUT
          echo "lines=$(jq -r '(.data[].totals.lines.percent*100|round/100|tostring) + "% (" + (.data[].totals.lines.covered|tostring) + "/" + (.data[].totals.lines.count|tostring) + ")"' coverage.json)" >> $GITHUB_OUTPUT
          echo "regions=$(jq -r '(.data[].totals.regions.percent*100|round/100|tostring) + "% (" + (.data[].totals.regions.covered|tostring) + "/" + (.data[].totals.regions.count|tostring) + ")"' coverage.json)" >> $GITHUB_OUTPUT

      - name: Comment PR with results
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const functions = '${{ steps.coverage.outputs.functions }}';
            const lines = '${{ steps.coverage.outputs.lines }}';
            const regions = '${{ steps.coverage.outputs.regions }}';

            const body = `## 📊 Coverage Report

            | Metric            | Value        |
            |-------------------|--------------|
            | Function Coverage | ${functions} |
            | Line Coverage     | ${lines}%    |
            | Region Coverage   | ${regions}%  |

            ---
            *Generated by llvm-cov*`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📊 Coverage Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
